#include <stdlib.h>
#include <stdbool.h>



static enum GameStates
{
  Welcome          = 0,
  SelectDifficulty = 1,
  PlayGame         = 2,
  FailScreen       = 3,
  WinScreen        = 4,
  
} currentState = PlayGame;

const uint32_t SwitchCount = 2;
const uint32_t ButtonCount = 4;
const uint32_t Switches[SwitchCount] = { PA_7, PA_6 };
const uint32_t Buttons[ButtonCount] = { PD_2, PE_0, PUSH1, PUSH2 };


struct ButtonState {
  bool state;
  bool isRising;
};

/*
struct GameState {
  
} activeGame;
*/
static struct InputState
{
  bool switches[2]; //Array of 2 bools to represent the switch states
  struct ButtonState buttons[4]; //Array of 4 Button state structs.
  
} gameInputState;


//Initialization function called by TivaHero once in Setup()


void GameUIInit() {
  OrbitOledInit();
  OrbitOledClear();
  OrbitOledClearBuffer();
  OrbitOledSetCursor(0,0);

  gameInputState = { 0 };

  for(int i = 0; i < SwitchCount; ++i )
    pinMode(Switches[i], INPUT);
  for(int i = 0; i < ButtonCount; ++i ){
    if (i == 2){
      pinMode(Buttons[i], INPUT_PULLUP);
    }
    else{
      pinMode(Buttons[i], INPUT);
    }
  }

  GPIOPadConfigSet(LED1Port, LED1, GPIO_STRENGTH_8MA_SC, GPIO_PIN_TYPE_STD);
  GPIOPadConfigSet(LED2Port, LED2, GPIO_STRENGTH_8MA_SC, GPIO_PIN_TYPE_STD);
  GPIOPadConfigSet(LED3Port, LED3, GPIO_STRENGTH_8MA_SC, GPIO_PIN_TYPE_STD);
  GPIOPadConfigSet(LED4Port, LED4, GPIO_STRENGTH_8MA_SC, GPIO_PIN_TYPE_STD);

  GPIOPinTypeGPIOOutput(LED1Port, LED1);
  GPIOPinTypeGPIOOutput(LED2Port, LED2);
  GPIOPinTypeGPIOOutput(LED3Port, LED3);
  GPIOPinTypeGPIOOutput(LED4Port, LED4);

  GPIOPinWrite(LED4Port, LED4, LOW);
  GPIOPinWrite(LED3Port, LED3, LOW);
  GPIOPinWrite(LED2Port, LED2, LOW);
  GPIOPinWrite(LED1Port, LED1, LOW);
}


//Functions to handle each seperate game state

static void handleStateWelcome()
{
  OrbitOledMoveTo(30,0);
  OrbitOledDrawString("Tiva Hero");

  /*Use LED example 
  if (millis() % 50 > 25){
    GPIOPinWrite(LED4Port, LED4, LED4);
    GPIOPinWrite(LED3Port, LED3, LED3);
    GPIOPinWrite(LED2Port, LED2, LED2);
    GPIOPinWrite(LED1Port, LED1, LED1);
  }
  else {
    GPIOPinWrite(LED4Port, LED4, LOW);
    GPIOPinWrite(LED3Port, LED3, LOW);
    GPIOPinWrite(LED2Port, LED2, LOW);
    GPIOPinWrite(LED1Port, LED1, LOW);
  }
  */
  
}

static void handleSelectDifficulty() {
  
}

static void handleGame() {
  render();
}

static void handleFailScreen() {
  
}

static void handleWinScreen() {
  
}

//Function to check for Input. Called constantly by GameUITick()

static void InputTick() {
  for(int i = 0; i < SwitchCount; ++i ){
    gameInputState.switches[i] = digitalRead(Switches[i]);
  }
  
  for(int i = 0; i < ButtonCount; ++i ) {
    // Only look for Rising Edge Signals.
    bool previousState = gameInputState.buttons[i].state;
    if (i > 1){
      if (digitalRead(Buttons[i])){
        gameInputState.buttons[i].state = 0;
      }
      else {
        gameInputState.buttons[i].state = 1;
      }
    }
    else {
      gameInputState.buttons[i].state = digitalRead(Buttons[i]);
    }
    
    gameInputState.buttons[i].isRising = (!previousState && gameInputState.buttons[i].state);
  }
}


//Main GameUI function that is called by TivaHero's Main loop

void GameUITick(){
  InputTick();
  //switches[0] is the lower switch on the orbut booster pack, switches[1] is the higher one
  //buttons[0] = left button on booster pack, buttons[1] = right button on booster pack, buttons[2] = top button on Tiva, buttons[3] = bottom button on Tiva

  
  Serial.print(gameInputState.buttons[0].state);//Center column
  Serial.print(gameInputState.buttons[1].state);//Right column
  Serial.print(gameInputState.buttons[2].state);
  Serial.print(gameInputState.buttons[3].state); //Left column
  Serial.print(' ');
  Serial.print(gameInputState.buttons[0].isRising);//Center column
  Serial.print(gameInputState.buttons[1].isRising);//Right column
  Serial.print(gameInputState.buttons[2].isRising);
  Serial.print(gameInputState.buttons[3].isRising); //Left column
  Serial.print(' ');
  Serial.print(gameInputState.switches[0]);
  Serial.print(gameInputState.switches[1]);
  Serial.print('\n');


  switch(currentState)
  
  {
  case Welcome:
    handleStateWelcome();
    break;

  case SelectDifficulty:
    handleSelectDifficulty();
    break;

  case PlayGame:
    handleGame();
    break;

  case FailScreen:
    handleFailScreen();
    break;

  case WinScreen:
    handleWinScreen();
    break;
  }

  
  OrbitOledUpdate();
}

